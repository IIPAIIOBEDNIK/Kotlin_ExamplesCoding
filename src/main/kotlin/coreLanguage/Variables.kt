package coreLanguage
// Переменные
/*
class Variables {
    var x: Int = 1
        //var или val указывается в зависимости от изменяемости переменной. var - переменная, val - константа
}

//Область видимости переменной

//Область действия переменной - это область программы, в которой переменная имеет значение. Другими словами, область
// действия переменной - область программы, где может применяться переменная. Переменные языка Kotlin имеют блочную
// область видимости.

fun main(args: Array<String>) {
    //Начало блока А
    var a = 10
    var i = 1

    while (i < 10) {
        //Начало блока B
        val b = a / i
        print(b)
        i++
    }
    print(b) //ошибка: переменная b за пределами области видимости
}
*/

//Операнды и операторы
//Оператор - это часть инструкции, определяющая значение, с которым необходимо работать. Оператор также выполняет
// определенную операцию над своими операндами. Вот примеры операторов: +, -, *, / и %. Операторы могут
// классифицироваться в зависимости от типа исполняемых операций и числа операндов, которые находятся под воздействием
// операторов.

//Основываясь на типе операций, которые выполняются оператором
// - Реляционные операторы
// - Операторы присваивания
// - Логические операторы
// - Арифметические операторы
// - Поразрядные операторы
// Примеры реляционных операторов: >, <, >=, <=, ==
// Примеры операторов присваивания: +=, -=, *=, /=, =
// Примеры логические операторы: &&, ||, !
// Примеры арифметические операторы: +, -, *, /
// Примеры поразрядные операторы: and(bits), or(bits), xor(bits), inv(), shl(bits), shr(bits), ushr(bits)
// Исходя из количества операторов, мы можем определить два основных типа
// - Унарные операторы
// - Бинарные операторы
// Примеры унарных операторов (требуется только один операнд): !, ++, --
// Примеры бинарных операторов (Требуется два операнда): +, -, *, /, %, &&, ||

//Типы переменных
//Тип переменной с учетом ее области значений представляет набор возможных значений этой переменной. Наиболее важными
// типами языка Kotlin является следующие
// - Int (32-разрядное целое число со знаком. От -2'147'483'648 до 2'147'483'647)
// - Float (32-битное число с плавающей запятой одинарной точности. Пример: var d: Double = 3.142)
// - Double (64-битное число с плавающей запятой двойной точности. Пример: var d: Double = 3.142)
// - Boolean (представляет собой истинные и ложные логические значения истинности "true" & "false")
// - String (последовательность символов. Пример: val martin: String = "Free at last, Free ...")
// - Char (необходим для представления символа. Пример: val c: Char = 'i')
// - Array (структура данных, состоящая из набора элементов или значений, причем каждый элемент имеет хотя бы один
// индекс или ключ. Массивы удобно использовать для хранения наборов элементов, которые позднее задействуются в
// программе. Массивы создаются с помощью библиотечного метода arrayOf(). Значения, которые необходимо сохранить в
// масиве, передаются в виде последовательности элементов разделенных запятыми)
/*
fun main(args: Array<String>) {
    val names = arrayOf("Tobi", "Tonia", "Timi")
    val numbers = arrayOf(1, 2, 3, 4)
    println(numbers[0]) //выводит 1
    println(numbers.get(1)) //выводит 2
}
*/

//Изменение значения позиции в массиве
/*
fun main(args: Array<String>) {
    val numbers = arrayOf(1, 2, 3, 4)
    println(numbers[0]) //выводит 1
    numbers[0] = 23
    println(numbers[0])
    println(numbers[1])
}
*/

//Получение размера массива
/*
fun main(args: Array<String>) {
    val numbers = arrayOf(1, 2, 3, 4)
    println(numbers.length) //выводит 4
}
*/

//Функция - блок кода, определяемый однократно и применяемый произвольное число раз. При написании программ
// рекомендуется разбивать сложные программные процессы на более мелкие блоки, которые выполняют конкретные задачи.
// Выполнить это необходимо по нескольким причинам:
// - Улучшение читаемости кода - гораздо проще читать программы, которые разбиты на функциональные блоки. Объем
// воспринимаемого в тот или иной момент кода значительно сокращается при использовании функций. На написание или
// настройкуразделов большой базы кода программист тратит слишком много времени. А при использовании функций
// контекст программы, с которым необходимо ознакомиться при совершенствовании логики программы, ограничивается
// лишь телом функции, в котором находится логика. - Более удобное сопровождение базы кода - использование функций
// в базе кода облегчает поддержку программы. Если нужно вносить изменения в конкретное свойство программы, это
// столь же просто, как и настройка функции, где создано это свойство.

//Функции объявляются с помощью ключевого слова fun
/*
class FunctionKotlin {
    fun printSum(a: Int, b: Int) {
        println(a + b)
    }
}
*/

//Определение функций можно разбить на следующие компоненты:
// - Идентификатор функции - присвоенное ей имя. Идентификатор необходимо применять при ссылке на функцию, если позднее
// ее следует вызвать в программе. В показанном примере объявления функции идентификатором функции является фрагмент
// printSum
// - Пара круглых скобок, содержащих разделенный запятыми список аргументов, которые передаются в качестве значений
// функции. Значения, передаваемые в функцию, называются аргументами функции. Все передаваемые в функцию аргументы
// должен иметь тип. Определение типа аргумента следует за двоеточием, помещенным после имени аргумента
// - Спецификация типа возврата - типы возвращаемых функций указываются так же, как и типы переменных и свойств.
// Спецификация возвращаемого типа следует за последней круглой скобкой и указывает тип после двоеточия.
// - Блок, содержащий тело функции. При рассмотрении показанного ранее примера объявления функции может сначала
// показаться, что в ней отсутствует тип возвращаемого значения. Но это не так - функция имеет тип возвращаемого
// значения Unit(модуль)
/*
fun printSum(a: Int, b: Int): Unit {
    println(a + b)
}
*/
//Впрочем, тип возвращаемого значения Unit может и не указываться явным образом.
// --- Идентификатор для функции необязателен. Функции, не имеющие идентификатора, называются анонимными. Анонимные
// функции присутствуют в языке Kotlin в форме лямбда-выражений.


// Вызов функций
//Функции не выполняются сразу же после определения. Для выполнения кода функции нужно его вызвать. Функции можно
// вызвать как функции, как методы и непрямым образом (косвенно) - с помощью методов invoke() и call(). Вот пример
// прямого функционального вызова с использованием функции:
/*
fun repeat (word: String, times: Int) {
    var i = 0

    while (i < times) {
        println(word)
        i++
    }
}

fun main (args: Array<String>) {
    repeat("Hello!", 5)
}
 */

// Возвращаемые значения
//Возвращаемое значение, как следует из его названия - это значение, возвращаемое функцией. Обратите внимание, что
//функции в Kotlin могут возвращаться значения при исполнении. Тип возвращаемого значения при исполнении. Тип
//возвращаемого функцией значения определяется типом возврата функции. Это продемострировано в следующем фрагменте кода

/*
fun returnFullName(firstName: String, surname: String): String {
    return "${firstName} ${surname}"
}

fun main(args: Array<String>) {
    val fullName: String = returnFullName("James", "Cameron")
    println(fullName) //Вывод: James Cameron
}
*/
//В этом коде функция returnFullName в качестве входных параметров принимает две разные строки и возвращает при вызове
// строковое значение. Тип возврата определен в заголовке функции. Возвращаемая строка создается с помощью шаблонов
// строк "${firstName} ${surname}". Значения имени и фамилии интерполизируются в строку символов.


// Соглашение об именовании функций
// Соглашение об именовании функций в языке Kotlin аналогичны тем, что применяются в языке Java. То есть при именовании
// методовиспользуется "подход верблюда" - имена пишутся так, что каждое слово в имени начинается с заглавныз букв без
// пробелов и знаков препинания:

/*
// Хорошее имя функции
fun sayHello() {
    println("Hello")
}
*/

/*
// Плохое имя функции
fun say_hello() {
    println("Hello")
}
*/